<?php

namespace PHPCRProxies\__CG__\Doctrine\ODM\PHPCR\Document;

/**
 * DO NOT EDIT THIS FILE - IT WAS CREATED BY DOCTRINE'S PROXY GENERATOR
 */
class Resource extends \Doctrine\ODM\PHPCR\Document\Resource implements \Doctrine\Common\Proxy\Proxy
{
    /**
     * @var \Closure the callback responsible for loading properties in the proxy object. This callback is called with
     *      three parameters, being respectively the proxy object to be initialized, the method that triggered the
     *      initialization process and an array of ordered parameters that were passed to that method.
     *
     * @see \Doctrine\Common\Persistence\Proxy::__setInitializer
     */
    public $__initializer__;

    /**
     * @var \Closure the callback responsible of loading properties that need to be copied in the cloned object
     *
     * @see \Doctrine\Common\Persistence\Proxy::__setCloner
     */
    public $__cloner__;

    /**
     * @var boolean flag indicating if this object was already initialized
     *
     * @see \Doctrine\Common\Persistence\Proxy::__isInitialized
     */
    public $__isInitialized__ = false;

    /**
     * @var array properties to be lazy loaded, with keys being the property
     *            names and values being their default values
     *
     * @see \Doctrine\Common\Persistence\Proxy::__getLazyProperties
     */
    public static $lazyPropertiesDefaults = [];



    /**
     * @param \Closure $initializer
     * @param \Closure $cloner
     */
    public function __construct($initializer = null, $cloner = null)
    {

        $this->__initializer__ = $initializer;
        $this->__cloner__      = $cloner;
    }







    /**
     * 
     * @return array
     */
    public function __sleep()
    {
        if ($this->__isInitialized__) {
            return ['__isInitialized__', 'id', 'node', 'nodename', 'parent', 'data', 'mimeType', 'encoding', 'lastModified', 'lastModifiedBy'];
        }

        return ['__isInitialized__', 'id', 'node', 'nodename', 'parent', 'data', 'mimeType', 'encoding', 'lastModified', 'lastModifiedBy'];
    }

    /**
     * 
     */
    public function __wakeup()
    {
        if ( ! $this->__isInitialized__) {
            $this->__initializer__ = function (Resource $proxy) {
                $proxy->__setInitializer(null);
                $proxy->__setCloner(null);

                $existingProperties = get_object_vars($proxy);

                foreach ($proxy->__getLazyProperties() as $property => $defaultValue) {
                    if ( ! array_key_exists($property, $existingProperties)) {
                        $proxy->$property = $defaultValue;
                    }
                }
            };

        }
    }

    /**
     * 
     */
    public function __clone()
    {
        $this->__cloner__ && $this->__cloner__->__invoke($this, '__clone', []);
    }

    /**
     * Forces initialization of the proxy
     */
    public function __load()
    {
        $this->__initializer__ && $this->__initializer__->__invoke($this, '__load', []);
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __isInitialized()
    {
        return $this->__isInitialized__;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __setInitialized($initialized)
    {
        $this->__isInitialized__ = $initialized;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __setInitializer(\Closure $initializer = null)
    {
        $this->__initializer__ = $initializer;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __getInitializer()
    {
        return $this->__initializer__;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __setCloner(\Closure $cloner = null)
    {
        $this->__cloner__ = $cloner;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific cloning logic
     */
    public function __getCloner()
    {
        return $this->__cloner__;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     * @static
     */
    public function __getLazyProperties()
    {
        return self::$lazyPropertiesDefaults;
    }

    
    /**
     * {@inheritDoc}
     */
    public function getNodename()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getNodename', []);

        return parent::getNodename();
    }

    /**
     * {@inheritDoc}
     */
    public function setNodename($name)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setNodename', [$name]);

        return parent::setNodename($name);
    }

    /**
     * {@inheritDoc}
     */
    public function getParentDocument()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getParentDocument', []);

        return parent::getParentDocument();
    }

    /**
     * {@inheritDoc}
     */
    public function getParent()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getParent', []);

        return parent::getParent();
    }

    /**
     * {@inheritDoc}
     */
    public function setParentDocument($parent)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setParentDocument', [$parent]);

        return parent::setParentDocument($parent);
    }

    /**
     * {@inheritDoc}
     */
    public function setParent($parent)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setParent', [$parent]);

        return parent::setParent($parent);
    }

    /**
     * {@inheritDoc}
     */
    public function setData($data)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setData', [$data]);

        return parent::setData($data);
    }

    /**
     * {@inheritDoc}
     */
    public function getData()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getData', []);

        return parent::getData();
    }

    /**
     * {@inheritDoc}
     */
    public function getSize()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getSize', []);

        return parent::getSize();
    }

    /**
     * {@inheritDoc}
     */
    public function setMimeType($mimeType)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setMimeType', [$mimeType]);

        return parent::setMimeType($mimeType);
    }

    /**
     * {@inheritDoc}
     */
    public function getMimeType()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getMimeType', []);

        return parent::getMimeType();
    }

    /**
     * {@inheritDoc}
     */
    public function setEncoding($encoding)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setEncoding', [$encoding]);

        return parent::setEncoding($encoding);
    }

    /**
     * {@inheritDoc}
     */
    public function getEncoding()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getEncoding', []);

        return parent::getEncoding();
    }

    /**
     * {@inheritDoc}
     */
    public function setLastModified($lastModified)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setLastModified', [$lastModified]);

        return parent::setLastModified($lastModified);
    }

    /**
     * {@inheritDoc}
     */
    public function getLastModified()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getLastModified', []);

        return parent::getLastModified();
    }

    /**
     * {@inheritDoc}
     */
    public function setLastModifiedBy($lastModifiedBy)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setLastModifiedBy', [$lastModifiedBy]);

        return parent::setLastModifiedBy($lastModifiedBy);
    }

    /**
     * {@inheritDoc}
     */
    public function getLastModifiedBy()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getLastModifiedBy', []);

        return parent::getLastModifiedBy();
    }

    /**
     * {@inheritDoc}
     */
    public function getMime()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getMime', []);

        return parent::getMime();
    }

    /**
     * {@inheritDoc}
     */
    public function __toString()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, '__toString', []);

        return parent::__toString();
    }

}
